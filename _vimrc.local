imap <S-CR> <CR><CR>end<Esc>-cc
colorscheme Sunburst
if has("gui_running")
  set transparency=0
  set guioptions=aAce
  set guifont=Inconsolata:h14,AnonymousPro:h12
  " set guifont=InputMono:h13,AnonymousPro:h12
  " set guifont=AnonymousPro:h13
endif
"colorscheme adaryn
"colorscheme codeburn
set relativenumber
set number

set sessionoptions="blank,curdir,buffers,sesdir,folds,tabpages,winsize"

"for ruby, autoindent with two spaces, always expand tabs
autocmd! FileType ruby,haml,eruby,yaml,html,javascript,sass,cucumber set ai sw=2 sts=2 et
autocmd! FileType python set sw=4 sts=4 et
autocmd FileType python nnoremap <LocalLeader>= :0,$!yapf<CR>
autocmd! FileType c,cpp set sw=4 sts=4 et

" disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
vnoremap <Up> <NOP>
vnoremap <Down> <NOP>
vnoremap <Left> <NOP>
vnoremap <Right> <NOP>

" custom commands
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

" Clear the search buffer when hitting return
function! MapCR()
  nnoremap <cr> :nohlsearch<cr>
endfunction
call MapCR()

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

map <F10> :set invpaste<CR>

" my custom additions
set cursorline
set lazyredraw

"let g:ctrlp_match_window_bottom = 0
"let g:ctrlp_match_window_reversed = 0
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_root_markers = ['.ctrlp']
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0
let g:ctrlp_max_files = 0
set wildignore+=*/log/*,*/tmp/*

if exists('+colorcolumn')
  set colorcolumn=80
  highlight ColorColumn guibg=#2d2d2d ctermbg=246
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove
map <leader>q :mks! last.vim<cr>:bufdo q!<cr>

"erlang syntax checker
let g:syntastic_erlang_checkers=['syntaxerl']

" map <leader>rt :!ctags --tag-relative --extra=+f -Rf.git/tags --exclude=.git,pkg -languages=-javascript,sql<cr><cr>
map <leader>rt :!ctags -R --langmap="ruby:+.rake.builder.jbuilder" --languages=-javascript<cr><cr>

" set tags+=.git/tags

" Bind `q` to close the buffer for help files
autocmd Filetype help nnoremap <buffer> q :q<CR>

" Copy the entire buffer into the system register
nmap <leader>co ggVGy

imap kj <ESC>
imap jk <ESC>

let g:syntastic_javascript_checkers = ['standard']
" let g:syntastic_mode_map = {"mode": "active", "passive_filetypes": ["eruby"]}"
" let g:JSHintHighlightErrorLine = 0
" au Filetype eruby let JSHintUpdateWriteOnly=1
" au Filetype eruby let g:syntastic_javascript_checkers = ['']
